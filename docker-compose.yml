version: "3"

services:
  api:
    build:
      context: ./api
      dockerfile: api.dockerfile
    container_name: pipeline-api
    networks:
      - twitter-pipeline-bridge
    ports:
      - 5021:5020
    environment:
      - PYTHONPATH "${PYTHONPATH}:/twitter-pipeline"
    env_file: ./api/env_file

  postgres:
    image: postgres:14.3
    container_name: pipeline-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - twitter-pipeline-bridge
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]

  airflow-init:
    build:
      context: .
      dockerfile: twitter_pipeline.dockerfile
    entrypoint: airflow db init
    container_name: airflow-db-init
    networks:
      - twitter-pipeline-bridge
    depends_on:
      - postgres

  airflow-webserver:
    build:
      context: .
      dockerfile: twitter_pipeline.dockerfile
    networks:
      - twitter-pipeline-bridge
    command:
      [sh, -c, "airflow users create --username airflow --firstname air --lastname flow
      --password $AIRFLOW_WEBSERVER_PWD --email $$AIRFLOW_WEBSERVER_EMAIL --role Admin && airflow webserver -p 8080"]
    ports:
      - 8080:8080
    depends_on:
      - airflow-init
    env_file: env
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health"]
    restart: always

  airflow-scheduler:
    build:
      context: .
      dockerfile: twitter_pipeline.dockerfile
    networks:
      - twitter-pipeline-bridge
    entrypoint: airflow scheduler
    depends_on:
      - airflow-init
    env_file: env
    restart: always

networks:
  twitter-pipeline-bridge:
    driver: bridge